name: Release Management

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

jobs:
  # Create and publish release
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Generate changelog
      run: |
        # Extract changelog from CHANGELOG.md for this version
        VERSION="${{ github.event.inputs.version || github.event.release.tag_name }}"
        awk "/^## \[$VERSION\]/,/^## \[.*\]/{if(/^## \[$VERSION\]/)f=1; if(f && /^## \[.*\]/ && !/^## \[$VERSION\]/)f=0; if(f)print}" CHANGELOG.md > release_notes.md

    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  # Build and push Docker image
  docker-release:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: techize/eks-validator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Update documentation
  docs-update:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: docs-site

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install docs dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mike

    - name: Update documentation
      run: |
        cd docs-site
        mike deploy --push --update-aliases ${{ github.event.release.tag_name }} latest

  # Notify stakeholders
  notify:
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: always() && (github.event_name == 'release' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Send notification
      run: |
        echo "Release completed successfully!"
        echo "Version: ${{ github.event.inputs.version || github.event.release.tag_name }}"
        echo "Published to PyPI and Docker Hub"
        # Add webhook notifications here if needed

  # Post-release validation
  validate-release:
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: github.event_name == 'release'
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install from PyPI
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        pip install eks-cluster-validator==${VERSION#v}

    - name: Test installation
      run: |
        eks-validator --help
        eks-validator --version

    - name: Test Docker image
      run: |
        docker run --rm techize/eks-validator:latest --help
