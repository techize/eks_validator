name: Code Quality

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - '**.md'
      - 'requirements*.txt'
  workflow_dispatch:

jobs:
  # Python code quality
  python-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install flake8 black isort mypy bandit safety

    - name: Run flake8
      run: |
        flake8 eks_validator/ main.py test_basic.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 eks_validator/ main.py test_basic.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run black formatting check
      run: |
        black --check --diff eks_validator/ main.py test_basic.py

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff eks_validator/ main.py test_basic.py

    - name: Run mypy type checking
      run: |
        mypy eks_validator/ main.py test_basic.py --ignore-missing-imports

    - name: Run bandit security linting
      run: |
        bandit -r eks_validator/ main.py test_basic.py -f json -o bandit-report.json || true

    - name: Run safety vulnerability check
      run: |
        safety check --json > safety-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Documentation quality
  docs-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install markdownlint-cli yamllint

    - name: Lint Markdown files
      run: |
        markdownlint '**/*.md' --config .markdownlint.json || true

    - name: Lint YAML files
      run: |
        yamllint **/*.yml **/*.yaml .github/workflows/*.yml || true

  # Dependency analysis
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools and pipdeptree
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pipdeptree

    - name: Check for dependency conflicts
      run: |
        pip install -r requirements.txt
        pipdeptree --warn silence --warn error

    - name: Check for outdated dependencies
      run: |
        pip list --outdated --format=json > outdated.json || true

    - name: Upload outdated dependencies report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: outdated-dependencies
        path: outdated.json

  # Test coverage
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-cov

    - name: Run tests with coverage
      run: |
        coverage run test_basic.py
        coverage report --fail-under=80
        coverage html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/

  # Performance baseline
  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance benchmark
      run: |
        python -c "
        import time
        import main
        start_time = time.time()
        # Run basic validation (would need actual config)
        end_time = time.time()
        print(f'Execution time: {end_time - start_time:.2f} seconds')
        " > performance.txt

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance.txt
