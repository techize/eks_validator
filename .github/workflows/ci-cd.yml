name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Pre-commit checks
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        flake8 eks_validator/ main.py test_basic.py --max-line-length=88 --extend-ignore=E203,W503

    - name: Run black check
      run: |
        black --check --diff eks_validator/ main.py test_basic.py

    - name: Run isort check
      run: |
        isort --check-only --diff eks_validator/ main.py test_basic.py

  # Basic functionality tests
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        python test_basic.py

    - name: Test CLI help
      run: |
        python main.py --help

    - name: Test CLI with invalid config
      run: |
        python main.py --config nonexistent.yaml validate test || echo "Expected failure"

  # Security checks
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and package
  build:
    runs-on: ubuntu-latest
    needs: [pre-commit, quality, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Docker build (optional)
  docker:
    runs-on: ubuntu-latest
    needs: [pre-commit, quality, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t eks-validator:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm eks-validator:${{ github.sha }} --help

  # Release (manual trigger only)
  release:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: |
          ## Changes

          See [CHANGELOG.md](CHANGELOG.md) for details.

          ## Installation

          ```bash
          pip install eks-cluster-validator==${{ github.event.inputs.version }}
          ```
        draft: false
        prerelease: false
